#+TODO: TODO STARTED | DONE FOLLOWUP CHECKED ONGOING 

* Startup
** VimOrganizer
*** DONE Install vim-organizer plugin
   :CLOSED: <2014-12-09 Tue>
**** Main plugin
    [[https://github.com/hsitz/VimOrganizer][VimOrganizer]]
**** Extra plugins required
   [[https://github.com/vim-scripts/utl.vim][vim-scripts/utl.vim]]
   [[https://github.com/chrisbra/NrrwRgn][chrisbra/NrrwRgn]]
   [[https://github.com/mattn/calendar-vim][mattn/calendar-vim]]
*** DONE Publish a git repo for the timeline
   :CLOSED: <2014-12-10 Wed>
*** VimOrganizer reading
**** DONE Read through the org-mode manual
    :CLOSED: <2014-12-09 Tue>
    [[http://orgmode.org/manual/index.html][orgmode manual]]
    VimOrganizer is pretty poorly documented - orgmode docs give a much 
    clearer idea of how things work.
**** DONE Read through the VimOrganizer docs
   :CLOSED: <2014-12-10 Wed>
   [[https://github.com/hsitz/VimOrganizer/blob/master/doc/vimorg.txt][VimOrganizer]]
   Reference for vim specific keybindings etc.
**** TODO Find a way to handle recurring deadlines
   Mostly for blogging - can do it in orgmode I think, possible in VO?
**** ONGOING Add extra todo states
    FOLLOWUP - Used to mark the internal docs that I haven't checked yet but that 
    may need to be updated
    ONGOING - Projects that have no end date but will be worked on for the 
    duration (like this one)
    STARTED - Single projects that are incomplete (as distinct from ONGOING)
***** Adding extra todo states
     Can either be done globally via vimrc (not great for collaboration) or 
     locally per file via configuration lines at the topp of the document.
     #+begin-src 
     #+TODO: TODO STARTED | DONE FOLLOWUP ONGOING
     #+end_src
     Note that for some reason amending the config lines requires restarting 
     gvim to take effect. Not just a reload, but actually restarting gvim. No 
     clue why - maybe reloads don't work the same outside of the terminal? 
**** TODO Put together a more succinct cheat sheet for vim keybindings
* OPW Admin
** ONGOING Write blog post
   :recurring
   :DEADLINE: <2014-12-19 Fri>
*** DONE post
    :CLOSED: <2014-12-16 Tue>
    Notes on [[https://misspindy.org/apocalypse/Notes][MissPindy wiki]] 
    regarding initial contribution and application process. Could be 
    interesting to future applicants.
*** TODO post
    :DEADLINE: <2014-12-19 Fri>
    Setting up VimOrganizer - general tools for getting started etc?
* Documentation
** TODO Finish updating Readme.md
   :SCHEDULED: <2014-12-11 Thu>
*** TODO Write an introduction section
*** TODO Revise the structure
    From wiki: Structure doesn't seem super logical. Should the dev section be
    at the top? Doesn't seem up-to-date-either. 
*** TODO Licensing documentation
    Usually separate from the readme, not sure if it needs to be but it makes 
    sense.
** TODO Read through the documentation for setting up debbugs
   :SCHEDULED: <2014-12-13 Sat>
   Refer to the bug lodged a few weeks ago
** ONGOING Research
*** STARTED Document the internal documentation
    What is already there? What is most urgent (bug reports as first port of 
    call)? From that we can work out priorities and scheduling etc.
    
    Generated the tree structure for the debbugs repo to get a basic idea of 
    what the internal documentation looks like. Was going to parse the file 
    and turn it into another .org file but I think it makes more sense to keep 
    it here.
    Wrote a "quick" python script to turns it into headings and subfolders which 
    might come in handy for other things so will pop it into the repo. Have 
    forgotten nearly all the python I ever knew, so that's fun. 
    
    Most of these files are not things I will need to touch - so might cull 
    this as I read. But in the mean time the structure is there to take notes.
**** FOLLOWUP README.md
**** html
***** CHECKED txt
      Empty folder. Heh.
**** email
***** CHECKED notify-closed-control.txt
***** CHECKED badnumber.txt
***** CHECKED forwarded.txt
**** debian
     Appears to be debian specific documentation. 
***** FOLLOWUP copyright
      Is this still GPL 2? The list of current developers is maybe out of 
      date? Maybe look at the git log to see who the conributors have been in 
      the last year?
      Probably shouldn't be using bzr get for the source.
***** FOLLOWUP rules
      SO a .deb is an archive with particular set of files. When you run the 
      .deb with dpkg or apt the rules file gets run. Basically a makefile?
***** FOLLOWUP control
      Package info. Tells dpkg what to configure when the package is being 
      built or installed. 
***** FOLLOWUP TODO
      Notes... by Don? Probably not. Out of date? What is this for, have these changes been 
      implemented?
***** FOLLOWUP README.mail
      Well this seems gloriously out of date. 
***** FOLLOWUP source
****** format
***** FOLLOWUP README.Debian
      Last timestamp was made when I was... 14 years old. Wow. Gloriously out 
      of date. Entire rewrite needed? Needs a proper structure. Might need to 
      go through the install process and see how much of this works.
****** TODO Configuration -
        To be checked. Probably correct? Could do with some more details 
        regardless.
****** TODO WWW - 
        Again, to be checked. Probably largely correct still? More detail.
        So debbugs needs two things to work - it needs to be able to send and 
        receive email and needs to be able to generate and display webpages. So 
        in order for users to be able to make http requests (should have paid 
        more attention in web programming) there needs to be a webserver set up 
        and configured to retreive flat resources from /usr/lib/debbugs/www and 
        to generate whatever is needed using scripts located in .../www/cgi. 
****** TODO Mail - 
        MTA (Mail Transfer Agent) receives email from external sources and 
        forwards it to wherever it needs to go. So in the case of a bug report, 
        it needs to be sent to the recieve script via stdin and this needs to be 
        configured on the mail server.
****** TODO Cron - 
      Makes sense. Check that the examples in /usr/share/doc/debbugs/examples 
      are up to date.

***** FOLLOWUP docs
**** FOLLOWUP scripts
     Eyeball these
***** age-1
***** service
***** db2html
***** spamscan-sa
***** html-install
***** spamscan
***** config.in.default
***** processall
***** config.debian
***** summary
***** text
***** html-control
***** expire
***** mailsummary
***** rebuild
***** process
***** errorlib
***** gen-indices
***** config
***** receive
**** FOLLOWUP UPGRADE
**** FOLLOWUP misc
***** Maintainers
***** sources
***** crontab.in
***** pseudo-packages.description
***** nextnumber
***** Maintainers.override
***** updateseqs
****** FOLLOWUP versions
       Double check these
******* debbugs-makeversions
******* versions_time_cleanup
******* rebuild-debinfo
******* update-mldbm
******* update-versions
******* test-versions.pl
******* queue-debinfo
******* queue-versions
******* merge-one-version
******* merge-versions.pl
******* dump_db.pl
******* update-packages
******* build-mldbm.pl
******* merge-one-debinfo
****** postpa
******* 20impbugs
******* 20impbugs-versioned
******* 10mirrors
******* 22oldbugs
******* 21bugclosers
****** misc
******* bugspam.cgi
******* split_index.pl
**** FOLLOWUP future_directions
